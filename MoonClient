local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/kav"))()
local Window = Library.CreateLib("Moon Hub 0.07", "Midnight")
local Tab = Window:NewTab("Moon Hub")
local Section = Tab:NewSection("Moon Hub Stuff")
Section:NewTextBox("Made By Sanprx#3144)", "e", function(txt)
    print(e)
end)

Section:NewButton("Chat Spy", "does what u think LOL", function()
--This script reveals ALL hidden messages in the default chat
--chat "/spy" to toggle!
enabled = true
--if true will check your messages too
spyOnMyself = true
--if true will chat the logs publicly (fun, risky)
public = false
--if true will use /me to stand out
publicItalics = true
--customize private logs
privateProperties = {
	Color = Color3.fromRGB(0,255,255); 
	Font = Enum.Font.SourceSansBold;
	TextSize = 18;
}
--////////////////////////////////////////////////////////////////
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance
 
local function onChatted(p,msg)
	if _G.chatSpyInstance == instance then
		if p==player and msg:lower():sub(1,4)=="/spy" then
			enabled = not enabled
			wait(0.3)
			privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
			StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
		elseif enabled and (spyOnMyself==true or p~=player) then
			msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
			local hidden = true
			local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
				if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
					hidden = false
				end
			end)
			wait(1)
			conn:Disconnect()
			if hidden and enabled then
				if public then
					saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
				else
					privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
					StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
				end
			end
		end
	end
end
 
for _,p in ipairs(Players:GetPlayers()) do
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end
Players.PlayerAdded:Connect(function(p)
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end)
privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
local chatFrame = player.PlayerGui.Chat.Frame
chatFrame.ChatChannelParentFrame.Visible = true
chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
--Credit to O Plays on Youtube, go subscribe to him (not my account, just advertising for him, we don't even know eachother lol)
end)

Section:NewButton("Z to noclip", "Z to noclipa", function()
    noclip = false
    game:GetService('RunService').Stepped:Connect(function()
        if noclip then
            game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)

        end
    end)

    local p = game.Players.LocalPlayer
    local mo = p:GetMouse()

    mo.KeyDown:Connect(function(k)
        if k == 'z' then
            noclip = not noclip
            p.Character.Humanoid:ChangeState(11)
        end
    end)
end)
Section:NewButton("Infijump (G To Toggle)", "Infijump Toggle", function()
g = false

local p = game.Players.LocalPlayer
local m = p:GetMouse()

m.KeyDown:connect(function(k)
    if g then
    if k:byte() == 32 then
    local hum = p.Character:FindFirstChildOfClass("Humanoid")
    hum:ChangeState("Jumping")
    wait(0.1)
    hum:ChangeState("Seated")
    end
    end
end)

local p = game.Players.LocalPlayer
local m = p:GetMouse()

m.KeyDown:Connect(function(l)
    if l == "g" then
    g = not g
    end
end)
end)
Section:NewButton("Ctrl Click Tp", "Check the fucking title", function()
    local plr = game.Players.LocalPlayer
    local mo = plr:GetMouse()
    local UIS = game:GetService("UserInputService")

    local HoldingControl = false

    mo.Button1Down:Connect(function()
        if HoldingControl then
            plr.Character:MoveTo(mo.Hit.p)
        end
    end)

    UIS.InputBegan:Connect(function(Input,Processed)
        if Input.UserInputType == Enum.UserInputType.Keyboard then
            if Input.KeyCode == Enum.KeyCode.LeftControl then
                HoldingControl = true
            elseif Input.KeyCode == Enum.KeyCode.RightControl then
                HoldingControl = true   
            end
        end
    end)

    UIS.InputEnded:Connect(function(Input,Processed)
        if Input.UserInputType == Enum.UserInputType.Keyboard then
            if Input.KeyCode == Enum.KeyCode.LeftControl then
                HoldingControl = false
            elseif Input.KeyCode == Enum.KeyCode.RightControl then
                HoldingControl = false
            end
        end
    end)
end)
Section:NewButton("RClick Aimbot", "Rightclick", function()
    PLAYER  = game.Players.LocalPlayer
    MOUSE   = PLAYER:GetMouse()
    CC      = game.Workspace.CurrentCamera

    ENABLED      = false
    ESP_ENABLED  = false

    _G.FREE_FOR_ALL = true

    _G.ESP_BIND    = 52
    _G.CHANGE_AIM  = 'q'

    _G.AIM_AT = 'Head'

    wait(1)

    function GetNearestPlayerToMouse()
        local PLAYERS      = {}
        local PLAYER_HOLD  = {}
        local DISTANCES    = {}
        for i, v in pairs(game.Players:GetPlayers()) do
            if v ~= PLAYER then
                table.insert(PLAYERS, v)
            end
        end
        for i, v in pairs(PLAYERS) do
            if _G.FREE_FOR_ALL == false then
                if v and (v.Character) ~= nil and v.TeamColor ~= PLAYER.TeamColor then
                    local AIM = v.Character:FindFirstChild(_G.AIM_AT)
                    if AIM ~= nil then
                        local DISTANCE                 = (AIM.Position - game.Workspace.CurrentCamera.CoordinateFrame.p).magnitude
                        local RAY                      = Ray.new(game.Workspace.CurrentCamera.CoordinateFrame.p, (MOUSE.Hit.p - CC.CoordinateFrame.p).unit * DISTANCE)
                        local HIT,POS                  = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                        local DIFF                     = math.floor((POS - AIM.Position).magnitude)
                        PLAYER_HOLD[v.Name .. i]       = {}
                        PLAYER_HOLD[v.Name .. i].dist  = DISTANCE
                        PLAYER_HOLD[v.Name .. i].plr   = v
                        PLAYER_HOLD[v.Name .. i].diff  = DIFF
                        table.insert(DISTANCES, DIFF)
                    end
                end
            elseif _G.FREE_FOR_ALL == true then
                local AIM = v.Character:FindFirstChild(_G.AIM_AT)
                if AIM ~= nil then
                    local DISTANCE                 = (AIM.Position - game.Workspace.CurrentCamera.CoordinateFrame.p).magnitude
                    local RAY                      = Ray.new(game.Workspace.CurrentCamera.CoordinateFrame.p, (MOUSE.Hit.p - CC.CoordinateFrame.p).unit * DISTANCE)
                    local HIT,POS                  = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF                     = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i]       = {}
                    PLAYER_HOLD[v.Name .. i].dist  = DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr   = v
                    PLAYER_HOLD[v.Name .. i].diff  = DIFF
                    table.insert(DISTANCES, DIFF)
                end
            end
        end

        if unpack(DISTANCES) == nil then
            return false
        end

        local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
        if L_DISTANCE > 20 then
            return false
        end

        for i, v in pairs(PLAYER_HOLD) do
            if v.diff == L_DISTANCE then
                return v.plr
            end
        end
        return false
    end

    GUI_MAIN                           = Instance.new('ScreenGui', PLAYER.PlayerGui)
    GUI_TARGET                         = Instance.new('TextLabel', GUI_MAIN)
    GUI_AIM_AT                         = Instance.new('TextLabel', GUI_MAIN)

    GUI_MAIN.Name                      = ' '

    GUI_TARGET.Size                    = UDim2.new(0,200,0,30)
    GUI_TARGET.BackgroundTransparency  = 0.5
    GUI_TARGET.BackgroundColor         = BrickColor.new('Fossil')
    GUI_TARGET.BorderSizePixel         = 0
    GUI_TARGET.Position                = UDim2.new(0.5,-100,0,0)
    GUI_TARGET.Text                    = '  : OFF'
    GUI_TARGET.TextColor3              = Color3.new(1,1,1)
    GUI_TARGET.TextStrokeTransparency  = 1
    GUI_TARGET.TextWrapped             = true
    GUI_TARGET.FontSize                = 'Size24'
    GUI_TARGET.Font                    = 'SourceSansBold'

    local TRACK = false

    function CREATE(BASE, TEAM)
        local ESP_MAIN                   = Instance.new('BillboardGui', PLAYER.PlayerGui)
        local ESP_DOT                    = Instance.new('Frame', ESP_MAIN)
        local ESP_NAME                   = Instance.new('TextLabel', ESP_MAIN)

        ESP_MAIN.Name                    = 'ESP'
        ESP_MAIN.Adornee                 = BASE
        ESP_MAIN.AlwaysOnTop             = true
        ESP_MAIN.ExtentsOffset           = Vector3.new(0, 1, 0)
        ESP_MAIN.Size                    = UDim2.new(0, 5, 0, 5)

        ESP_DOT.Name                     = 'DOT'
        ESP_DOT.BackgroundColor          = BrickColor.new('Bright red')
        ESP_DOT.BackgroundTransparency   = 0.3
        ESP_DOT.BorderSizePixel          = 0
        ESP_DOT.Position                 = UDim2.new(-0.5, 0, -0.5, 0)
        ESP_DOT.Size                     = UDim2.new(2, 0, 2, 0)
        ESP_DOT.Visible                  = true
        ESP_DOT.ZIndex                   = 10

        ESP_NAME.Name                    = 'NAME'
        ESP_NAME.BackgroundColor3        = Color3.new(255, 255, 255)
        ESP_NAME.BackgroundTransparency  = 1
        ESP_NAME.BorderSizePixel         = 0
        ESP_NAME.Position                = UDim2.new(0, 0, 0, -40)
        ESP_NAME.Size                    = UDim2.new(1, 0, 10, 0)
        ESP_NAME.Visible                 = true
        ESP_NAME.ZIndex                  = 10
        ESP_NAME.Font                    = 'ArialBold'
        ESP_NAME.FontSize                = 'Size14'
        ESP_NAME.Text                    = BASE.Parent.Name:upper()
        ESP_NAME.TextColor               = BrickColor.new('Bright red')
    end

    function CLEAR()
        for _,v in pairs(PLAYER.PlayerGui:children()) do
            if v.Name == 'ESP' and v:IsA('BillboardGui') then
                v:Destroy()
            end
        end
    end

    function FIND()
        CLEAR()
        TRACK = true
        spawn(function()
            while wait() do
                if TRACK then
                    CLEAR()
                    for i,v in pairs(game.Players:GetChildren()) do
                        if v.Character and v.Character:FindFirstChild('Head') then
                            if _G.FREE_FOR_ALL == false then
                                if v.TeamColor ~= PLAYER.TeamColor then
                                    if v.Character:FindFirstChild('Head') then
                                        CREATE(v.Character.Head, true)
                                    end
                                end
                            else
                                if v.Character:FindFirstChild('Head') then
                                    CREATE(v.Character.Head, true)
                                end
                            end
                        end
                    end
                end
            end
            wait(1)
        end)
    end

    MOUSE.Button2Down:connect(function()
        ENABLED = true
    end)

    MOUSE.Button2Up:connect(function()
        ENABLED = false
    end)

    MOUSE.KeyDown:connect(function(KEY)
        KEY = KEY:lower():byte()
        if KEY == _G.ESP_BIND then
            if ESP_ENABLED == false then
                FIND()
                ESP_ENABLED = true
                print('ESP : ON')
            elseif ESP_ENABLED == true then
                wait()
                CLEAR()
                TRACK = false
                ESP_ENABLED = false
                print('ESP : OFF')
            end
        end
    end)

    MOUSE.KeyDown:connect(function(KEY)
        if KEY == _G.CHANGE_AIM then
            if _G.AIM_AT == 'Head' then
                _G.AIM_AT = 'Torso'
                GUI_AIM_AT.Text = 'AIMING : TORSO'
            elseif _G.AIM_AT == 'Torso' then
                _G.AIM_AT = 'Head'
                GUI_AIM_AT.Text = 'AIMING : HEAD'
            end
        end
    end)

    game:GetService('RunService').RenderStepped:connect(function()
        if ENABLED then
            local TARGET = GetNearestPlayerToMouse()
            if (TARGET ~= false) then
                local AIM = TARGET.Character:FindFirstChild(_G.AIM_AT)
                if AIM then
                    CC.CoordinateFrame = CFrame.new(CC.CoordinateFrame.p, AIM.CFrame.p)
                end
            end
        end
    end)

    repeat
        wait()
        if ESP_ENABLED == true then
            FIND()
        end
    until ESP_ENABLED == false
end)
Section:NewButton("ESP", "ESP lol", function()
    loadstring(game:HttpGet(('https://pastebin.com/raw/gwN6fn2v'),true))()
end)
Section:NewButton("E to fly", "E to flighty", function()
        repeat wait() 
    until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Head") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
    local mouse = game.Players.LocalPlayer:GetMouse() 
    repeat wait() until mouse
    local plr = game.Players.LocalPlayer 
    local torso = plr.Character.Head 
    local flying = false
    local deb = true 
    local ctrl = {f = 0, b = 0, l = 0, r = 0} 
    local lastctrl = {f = 0, b = 0, l = 0, r = 0} 
    local maxspeed = 50 
    local speed = 0 

    function Fly() 
        local bg = Instance.new("BodyGyro", torso) 
        bg.P = 9e4 
        bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
        bg.cframe = torso.CFrame 
        local bv = Instance.new("BodyVelocity", torso) 
        bv.velocity = Vector3.new(0,0.1,0) 
        bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
        repeat wait() 
            plr.Character.Humanoid.PlatformStand = true 
            if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
                speed = speed+.5+(speed/maxspeed) 
                if speed > maxspeed then 
                    speed = maxspeed 
                end 
            elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
                speed = speed-1 
                if speed < 0 then 
                    speed = 0 
                end 
            end 
            if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
                lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
            elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
            else 
                bv.velocity = Vector3.new(0,0.1,0) 
            end 
            bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0) 
        until not flying 
        ctrl = {f = 0, b = 0, l = 0, r = 0} 
        lastctrl = {f = 0, b = 0, l = 0, r = 0} 
        speed = 0 
        bg:Destroy() 
        bv:Destroy() 
        plr.Character.Humanoid.PlatformStand = false 
    end 
    mouse.KeyDown:connect(function(key) 
        if key:lower() == "e" then 
            if flying then flying = false 
            else 
                flying = true 
                Fly() 
            end 
        elseif key:lower() == "w" then 
            ctrl.f = 1 
        elseif key:lower() == "s" then 
            ctrl.b = -1 
        elseif key:lower() == "a" then 
            ctrl.l = -1 
        elseif key:lower() == "d" then 
            ctrl.r = 1 
        end 
    end) 
    mouse.KeyUp:connect(function(key) 
        if key:lower() == "w" then 
            ctrl.f = 0 
        elseif key:lower() == "s" then 
            ctrl.b = 0 
        elseif key:lower() == "a" then 
            ctrl.l = 0 
        elseif key:lower() == "d" then 
            ctrl.r = 0 
        end 
    end)
    Fly()
end)
Section:NewButton("Remote Spy", "Spy", function()
--[[
 
    -Created by Vaeb.
 
]]
 
_G.scanRemotes = true
 
_G.ignoreNames = {
    Event = true;
    MessagesChanged = true;
}
 
setreadonly(getrawmetatable(game), false)
local pseudoEnv = {}
local gameMeta = getrawmetatable(game)
 
local tabChar = "      "
 
local function getSmaller(a, b, notLast)
    local aByte = a:byte() or -1
    local bByte = b:byte() or -1
    if aByte == bByte then
        if notLast and #a == 1 and #b == 1 then
            return -1
        elseif #b == 1 then
            return false
        elseif #a == 1 then
            return true
        else
            return getSmaller(a:sub(2), b:sub(2), notLast)
        end
    else
        return aByte < bByte
    end
end
 
local function parseData(obj, numTabs, isKey, overflow, noTables, forceDict)
    local objType = typeof(obj)
    local objStr = tostring(obj)
    if objType == "table" then
        if noTables then
            return objStr
        end
        local isCyclic = overflow[obj]
        overflow[obj] = true
        local out = {}
        local nextIndex = 1
        local isDict = false
        local hasTables = false
        local data = {}
 
        for key, val in next, obj do
            if not hasTables and typeof(val) == "table" then
                hasTables = true
            end
 
            if not isDict and key ~= nextIndex then
                isDict = true
            else
                nextIndex = nextIndex + 1
            end
 
            data[#data+1] = {key, val}
        end
 
        if isDict or hasTables or forceDict then
            out[#out+1] = (isCyclic and "Cyclic " or "") .. "{"
            table.sort(data, function(a, b)
                local aType = typeof(a[2])
                local bType = typeof(b[2])
                if bType == "string" and aType ~= "string" then
                    return false
                end
                local res = getSmaller(aType, bType, true)
                if res == -1 then
                    return getSmaller(tostring(a[1]), tostring(b[1]))
                else
                    return res
                end
            end)
            for i = 1, #data do
                local arr = data[i]
                local nowKey = arr[1]
                local nowVal = arr[2]
                local parseKey = parseData(nowKey, numTabs+1, true, overflow, isCyclic)
                local parseVal = parseData(nowVal, numTabs+1, false, overflow, isCyclic)
                if isDict then
                    local nowValType = typeof(nowVal)
                    local preStr = ""
                    local postStr = ""
                    if i > 1 and (nowValType == "table" or typeof(data[i-1][2]) ~= nowValType) then
                        preStr = "\n"
                    end
                    if i < #data and nowValType == "table" and typeof(data[i+1][2]) ~= "table" and typeof(data[i+1][2]) == nowValType then
                        postStr = "\n"
                    end
                    out[#out+1] = preStr .. string.rep(tabChar, numTabs+1) .. parseKey .. " = " .. parseVal .. ";" .. postStr
                else
                    out[#out+1] = string.rep(tabChar, numTabs+1) .. parseVal .. ";"
                end
            end
            out[#out+1] = string.rep(tabChar, numTabs) .. "}"
        else
            local data2 = {}
            for i = 1, #data do
                local arr = data[i]
                local nowVal = arr[2]
                local parseVal = parseData(nowVal, 0, false, overflow, isCyclic)
                data2[#data2+1] = parseVal
            end
            out[#out+1] = "{" .. table.concat(data2, ", ") .. "}"
        end
 
        return table.concat(out, "\n")
    else
        local returnVal = nil
        if (objType == "string" or objType == "Content") and (not isKey or tonumber(obj:sub(1, 1))) then
            local retVal = '"' .. objStr .. '"'
            if isKey then
                retVal = "[" .. retVal .. "]"
            end
            returnVal = retVal
        elseif objType == "EnumItem" then
            returnVal = "Enum." .. tostring(obj.EnumType) .. "." .. obj.Name
        elseif objType == "Enum" then
            returnVal = "Enum." .. objStr
        elseif objType == "Instance" then
            returnVal = obj.Parent and obj:GetFullName() or obj.ClassName
        elseif objType == "CFrame" then
            returnVal = "CFrame.new(" .. objStr .. ")"
        elseif objType == "Vector3" then
            returnVal = "Vector3.new(" .. objStr .. ")"
        elseif objType == "Vector2" then
            returnVal = "Vector2.new(" .. objStr .. ")"
        elseif objType == "UDim2" then
            returnVal = "UDim2.new(" .. objStr:gsub("[{}]", "") .. ")"
        elseif objType == "BrickColor" then
            returnVal = "BrickColor.new(\"" .. objStr .. "\")"
        elseif objType == "Color3" then
            returnVal = "Color3.new(" .. objStr .. ")"
        elseif objType == "NumberRange" then
            returnVal = "NumberRange.new(" .. objStr:gsub("^%s*(.-)%s*$", "%1"):gsub(" ", ", ") .. ")"
        elseif objType == "PhysicalProperties" then
            returnVal = "PhysicalProperties.new(" .. objStr .. ")"
        else
            returnVal = objStr
        end
        return returnVal
    end
end
 
function tableToString(t)
    return parseData(t, 0, false, {}, nil, false)
end
 
local detectClasses = {
    BindableEvent = true;
    BindableFunction = true;
    RemoteEvent = true;
    RemoteFunction = true;
}
 
local classMethods = {
    BindableEvent = "Fire";
    BindableFunction = "Invoke";
    RemoteEvent = "FireServer";
    RemoteFunction = "InvokeServer";
}
 
local realMethods = {}
 
for name, enabled in next, detectClasses do
    if enabled then
        realMethods[classMethods[name]] = Instance.new(name)[classMethods[name]]
    end
end
 
for key, value in next, gameMeta do pseudoEnv[key] = value end
 
local incId = 0
 
local function getValues(self, key, ...)
    return {realMethods[key](self, ...)}
end
 
gameMeta.__index, gameMeta.__namecall = function(self, key)
    if not realMethods[key] or _G.ignoreNames[self.Name] or not _G.scanRemotes then return pseudoEnv.__index(self, key) end
    return function(_, ...)
        incId = incId + 1
        local nowId = incId
        local strId = "[RemoteSpy_" .. nowId .. "]"
 
        local allPassed = {...}
        local returnValues = {}
 
        local ok, data = pcall(getValues, self, key, ...)
 
        if ok then
            returnValues = data
            print("\n" .. strId .. " ClassName: " .. self.ClassName .. " | Path: " .. self:GetFullName() .. " | Method: " .. key .. "\n" .. strId .. " Packed Arguments: " .. tableToString(allPassed) .. "\n" .. strId .. " Packed Returned: " .. tableToString(returnValues) .. "\n")
        else
            print("\n" .. strId .. " ClassName: " .. self.ClassName .. " | Path: " .. self:GetFullName() .. " | Method: " .. key .. "\n" .. strId .. " Packed Arguments: " .. tableToString(allPassed) .. "\n" .. strId .. " Packed Returned: [ERROR] " .. data .. "\n")
        end
 
        return unpack(returnValues)
    end
end
 
print("\nRan Vaeb's RemoteSpy\n")

end)
Section:NewSlider("Walkspeed", "Caps to 500", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)
Section:NewSlider("JumpPower", "Caps to 500", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = s
end)
Section:NewSlider("MaxHealth", "Caps to 500", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.MaxHealth = s
end)
button:UpdateButton("New Text")
Section:NewToggle("ToggleText", "ToggleInfo", function(state)
    if state then
        print("Toggle On")
    else
        print("Toggle Off")
    end
end)


game:GetService("RunService").RenderStepped:Connect(function()
    if getgenv().Toggled then
        toggle:UpdateToggle("Toggle On")
    else
        toggle:UpdateToggle("Toggle Off")
    end
end)
Section:NewSlider("SliderText", "SliderInfo", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)
Section:NewTextBox("TextboxText", "TextboxInfo", function(txt)
    print(txt)
end)

Section:NewKeybind("KeybindText", "KeybindInfo", Enum.KeyCode.F, function()
    print("You just clicked the bind")
end)

Section:NewKeybind("KeybindText", "KeybindInfo", Enum.KeyCode.F, function()
    Library:ToggleUI()
end)
Section:NewDropdown("DropdownText", "DropdownInf", {"Option 1", "Option 2", "Option 3"}, function(currentOption)
    print(currentOption)
end)

local oldList = {
  "2019",
  "2020"
}
local newList = {
  "2021",
  "2022"
}
local dropdown = Section:NewDropdown("Dropdown","Info", oldList, function()

end)
Section:NewButton("Update Dropdown", "Refreshes Dropdown", function()
  dropdown:Refresh(newList)
end)
Section:NewColorPicker("Color Text", "Color Info", Color3.fromRGB(0,0,0), function(color)
    print(color)
    -- Second argument is the default color
end)

local colors = {
    SchemeColor = Color3.fromRGB(0,255,255),
    Background = Color3.fromRGB(0, 0, 0),
    Header = Color3.fromRGB(0, 0, 0),
    TextColor = Color3.fromRGB(255,255,255),
    ElementColor = Color3.fromRGB(20, 20, 20)
}
local Window = Library.CreateLib("TITLE", colors)
for theme, color in pairs(themes) do
    Section:NewColorPicker(theme, "Change your "..theme, color, function(color3)
        Library:ChangeColor(theme, color3)
    end)
end
